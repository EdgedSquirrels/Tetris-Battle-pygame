class Event(object):
    """
    A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __init__(self):
        self.name = "Generic event"

    def __str__(self):
        return self.name


class QuitEvent(Event):
    """
    Quit event.
    """

    def __init__(self):
        self.name = "Quit event"


class TickEvent(Event):
    """
    Tick event.
    """

    def __init__(self):
        self.name = "Tick event"


class InputEvent(Event):
    """
    Keyboard or mouse input event.
    """

    def __init__(self, unicodechar, clickpos):
        self.name = "Input event"
        self.char = unicodechar
        self.clickpos = clickpos

    def __str__(self):
        return "%s, char=%s, clickpos=%s" % (self.name, self.char, self.clickpos)


class PlayerMoveEvent(Event):
    """
    Player makes a movement.
    """

    def __init__(self, id, action):
        self.name = "PlayerMove event"
        self.id = id
        self.action = action

    def __str__(self):
        return "Player %d %s" % (self.id, self.action)


class SendGarbageEvent(Event):
    """
    Player sends garbage lines to the opponent.
    """

    def __init__(self, from_id, to_id, n_garbage):
        self.name = "SendGarbage event"
        self.from_id = from_id
        self.to_id = to_id
        self.n_garbage = n_garbage

    def __str__(self):
        return "Player %d sends Player %d %d garbage lines." % (
            self.from_id,
            self.to_id,
            self.n_garbage,
        )


class StateChangeEvent(Event):
    """
    The current state is changed.
    """

    def __init__(self, cur_event, loser=None, winner=None):
        self.cur_event = cur_event
        self.loser = loser
        self.winner = winner

    def __str__(self):
        return "The current event is changed to %s." % self.cur_event


class PlayerNumberChangeEvent(Event):
    """
    The player number is changed.
    """

    def __init__(self, n_players):
        self.n_players = n_players

    def __str__(self):
        return "%s players will play the game." % self.n_players


class KOEvent(Event):
    """
    Someone is KOed.
    """

    def __init__(self, KOed_id, KOget_id):
        self.KOed_id = KOed_id
        self.KOget_id = KOget_id

    def __str__(self):
        return "Player %d is KOed by player %d." % (self.KOed_id, self.KOget_id)


class InitializeEvent(Event):
    """
    Tells all listeners to initialize themselves.
    This includes loading libraries and resources.

    Avoid initializing such things within listener __init__ calls
    to minimize snafus (if some rely on others being yet created.)
    """

    def __init__(self):
        self.name = "Initialize event"


class PlayerNumberChangeEvent(Event):
    """
    The player number is changed.
    """

    def __init__(self, n_players):
        self.n_players = n_players

    def __str__(self):
        return "%s players will play the game." % self.n_players


class PlaySoundEvent(Event):
    """
    Play certain sound or music.
    """

    def __init__(self, name):
        self.name = name

    def __str__(self):
        return 'Sound effect "%s" is being played' % self.name


class EventManager(object):
    """
    We coordinate communication between the Model, View, and Controller.
    """

    def __init__(self):
        from weakref import WeakKeyDictionary

        self.listeners = WeakKeyDictionary()

    def RegisterListener(self, listener):
        """
        Adds a listener to our spam list.
        It will receive Post()ed events through it's notify(event) call.
        """

        self.listeners[listener] = 1

    def UnregisterListener(self, listener):
        """
        Remove a listener from our spam list.
        This is implemented but hardly used.
        Our weak ref spam list will auto remove any listeners who stop existing.
        """

        if listener in self.listeners.keys():
            del self.listeners[listener]

    def Post(self, event):
        """
        Post a new event to the message queue.
        It will be broadcast to all listeners.
        """

        # if not isinstance(event, TickEvent):
        # print the event (unless it is TickEvent)
        # print(str(event))
        for listener in self.listeners.keys():
            listener.notify(event)
